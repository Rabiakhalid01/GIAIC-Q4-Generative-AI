from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, EmailStr, validator, Field
from pydantic.types import constr
from datetime import date
from typing import Optional
from uuid import uuid4

app = FastAPI()

# In-memory storage
users_db = {}
tasks_db = {}

# ==========================
# ðŸ“¦ Models
# ==========================

class UserCreate(BaseModel):
    email: EmailStr
    username: constr(min_length=3, max_length=20)  

class UserRead(BaseModel):
    id: str
    email: EmailStr
    username: str

class TaskCreate(BaseModel):
    title: str
    description: Optional[str] = None
    due_date: date
    user_id: str

    @validator('due_date')
    def validate_due_date(cls, v):
        if v < date.today():
            raise ValueError("Due date must be today or later.")
        return v

class Task(TaskCreate):
    id: str = Field(default_factory=lambda: str(uuid4()))

# ==========================
# ðŸš€ Endpoints
# ==========================

# ðŸ‘‰ Create user
@app.post("/users/", response_model=UserRead)
def create_user(user: UserCreate):
    user_id = str(uuid4())
    new_user = {"id": user_id, **user.dict()}
    users_db[user_id] = new_user
    return new_user

# ðŸ‘‰ Get user
@app.get("/users/{user_id}", response_model=UserRead)
def get_user(user_id: str):
    user = users_db.get(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

# ðŸ‘‰ Create task
@app.post("/tasks/", response_model=Task)
def create_task(task_data: TaskCreate):
    if task_data.user_id not in users_db:
        raise HTTPException(status_code=404, detail="User not found")
    task = Task(**task_data.dict())
    tasks_db[task.id] = task.dict()
    return task
